name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest ]
        python-version: [ 3.9 ]
    name: Build
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full jq
          \cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run script
        run: |
          python main.py

      - name: Get Version
        id: get_version
        run: |
          filename=$(ls ./cache/merge/ | grep ".zip$" | xargs -I{} basename {})
          echo "::set-output name=VERSION_FILE::$filename"

      - name: Create Tag
        uses: negz/create-tag@v1
        with:
          version: ${{steps.github_release.outputs.TAG_NAME }}
          message: ${{steps.github_release.outputs.TAG_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Changelog
        id: github_release
        run: |
          curl -s "https://api.github.com/repos/Fndroid/clash_for_windows_pkg/releases/latest" > response.json
          body=$(jq -r '.body' response.json)
          tag_name=$(jq -r '.tag_name' response.json)
          echo "::set-output name=CHANGE_LOG::$body"
          echo "::set-output name=TAG_NAME::$tag_name"


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release V${{steps.github_release.outputs.TAG_NAME }}
          body: ${{ steps.github_release.outputs.CHANGE_LOG }}
          draft: false
          prerelease: false

      - name: Upload File
        id: upload-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cache/merge/${{ steps.get_version.outputs.VERSION_FILE }}
          asset_name: ${{ steps.get_version.outputs.VERSION_FILE }}
          asset_content_type: application/zip